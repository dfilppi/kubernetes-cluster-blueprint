###########################################################
# This Blueprint installs Kubernetes on Openstack
###########################################################

tosca_definitions_version: cloudify_dsl_1_2

imports:  
  - http://getcloudify.org/spec/cloudify/3.3.1/types.yaml
  - http://getcloudify.org/spec/diamond-plugin/1.3.1/plugin.yaml
  - http://getcloudify.org/spec/openstack-plugin/1.3.1/plugin.yaml

inputs:

  image:
    description: >
      Image to be used when launching agent VM's

  flavor:
    description: >
      Flavor of the agent VM's

  agent_user:
    description: >
      User for connecting to agent VM's

  master_port:
    description: >
      The port that the master API will respond to.
    default: 8080

node_templates:

  master_host:
    type: cloudify.openstack.nodes.Server
    instances:
      deploy: 1
    properties:
      cloudify_agent:
        user: ubuntu
      image: {get_input: image}
      flavor: {get_input: flavor}
      server:
        userdata: |
          #!/bin/bash
          sudo service ssh stop
          curl -o install.sh -sSL https://get.docker.com/
          sudo sh install.sh
          sudo groupadd docker
          sudo gpasswd -a ubuntu docker
          sudo service docker restart
          sudo service ssh start
    relationships:
      - target: master_security_group
        type: cloudify.openstack.server_connected_to_security_group
      - type: cloudify.openstack.server_connected_to_floating_ip
        target: master_ip

  master_ip:
    type: cloudify.openstack.nodes.FloatingIP

  master_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      security_group:
        name: master_security_group
        description: kubernetes master security group
      rules:
      - remote_ip_prefix: 0.0.0.0/0  # for remote install
        port: 22
      - remote_ip_prefix: 0.0.0.0/0
        port: { get_input: master_port }
      - remote_ip_prefix: 0.0.0.0/0  # for minions
        port: 4001
      - remote_ip_prefix: 0.0.0.0/0  # for service
        port: 30000

  docker_master:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        start: scripts/docker/bootstrap.py
    relationships:
      - type: cloudify.relationships.contained_in
        target: master_host

  etcd:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/etcd/create.py
    relationships:
      - type: cloudify.relationships.contained_in
        target: master_host
      - type: cloudify.relationships.depends_on
        target: docker_master

  flannel:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/flannel/master/create.py
        configure:
          implementation: scripts/flannel/master/configure.py
    relationships:
      - type: cloudify.relationships.contained_in
        target: master_host
      - type: cloudify.relationships.depends_on
        target: etcd

  kubernetes_master:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/kubernetes/master/create.py
          inputs:
            master_port: { get_input: master_port }
        start:
          implementation: scripts/kubernetes/master/start.py
          inputs:
            master_port: { get_input: master_port }
    relationships:
      - type: cloudify.relationships.contained_in
        target: master_host
      - type: cloudify.relationships.depends_on
        target: flannel

  kubernetes_proxy:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/kubernetes/master/run_proxy.py
          inputs:
            master_port: { get_input: master_port }
    relationships:
      - type: cloudify.relationships.contained_in
        target: master_host
      - type: cloudify.relationships.depends_on
        target: kubernetes_master

  kubectl:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/kubernetes/kubectl.py
    relationships:
      - type: cloudify.relationships.contained_in
        target: master_host
      - type: cloudify.relationships.depends_on
        target: kubernetes_proxy

  kubernetes_node_host:
    type: cloudify.openstack.nodes.Server
    instances:
      deploy: 2
    properties:
      cloudify_agent:
        user: ubuntu
      image: {get_input: image}
      flavor: {get_input: flavor}
      server:
        userdata: |
          #!/bin/bash
          service ssh stop
          curl -o install.sh -sSL https://get.docker.com/
          sh install.sh
          groupadd docker
          gpasswd -a ubuntu docker
          service docker stop
          service ssh start
    relationships:
      - target: master_security_group
        type: cloudify.openstack.server_connected_to_security_group

  docker_node:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        start: scripts/docker/bootstrap.py
    relationships:
      - type: cloudify.relationships.contained_in
        target: kubernetes_node_host

  flannel_node:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/flannel/node/create.py
          inputs:
            master_ip: { get_attribute: [ master_host, ip ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: kubernetes_node_host
      - type: cloudify.relationships.depends_on
        target: docker_node
      - type: cloudify.relationships.connected_to
        target: kubernetes_proxy

  kubernetes_node:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: scripts/kubernetes/node/start.py
          inputs:
            master_ip: { get_attribute: [ master_host, ip ] }
            master_port: { get_input: master_port }
    relationships:
      - type: cloudify.relationships.connected_to 
        target: kubernetes_master
      - type: cloudify.relationships.contained_in
        target: kubernetes_node_host
      - type: cloudify.relationships.depends_on
        target: flannel_node
      - type: cloudify.relationships.depends_on
        target: kubernetes_proxy

  kubernetes_proxy_node:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/kubernetes/node/proxy.py
          inputs:
            master_ip: { get_attribute: [ master_host, ip ] }
            master_port: { get_input: master_port }
    relationships:
      - type: cloudify.relationships.contained_in
        target: kubernetes_node_host
      - type: cloudify.relationships.depends_on
        target: kubernetes_node

outputs:
  kubernetes_info:
    description: Kuberenetes master info
    value:
      url: {concat: ["http://",{ get_attribute: [ master_ip, floating_ip_address ]},":", { get_input: master_port } ] }
